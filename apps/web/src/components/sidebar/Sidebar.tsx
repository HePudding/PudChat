'use client'

import { useState } from 'react'
import { Search, Plus, Upload, Settings } from 'lucide-react'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Separator } from '@/components/ui/separator'
import AvatarMono from '@/components/common/AvatarMono'

// Á§∫‰æãÊï∞ÊçÆ
const demoConversations = [
  { id: 'c1', title: 'ÈªòËÆ§ËØùÈ¢ò', snippet: '‰Ω†Â•ΩÂëÄÔΩû', time: '16:27' },
  { id: 'c2', title: '‰Ω†Â•ΩÂèãÂä©ÁêÜ', snippet: 'Ê¨¢Ëøé‰ΩøÁî® PudChat', time: 'Êò®Â§©' },
  { id: 'c3', title: 'AI ÁºñÁ®ãÂä©Êâã', snippet: 'Â∏ÆÊàëÂÜô‰∏™ÂáΩÊï∞', time: 'Êò®Â§©' },
  { id: 'c4', title: 'Â≠¶‰π†ËÆ°Âàí', snippet: 'Âà∂ÂÆöÂ≠¶‰π†Ë∑ØÁ∫ø', time: '2Â§©Ââç' },
  { id: 'c5', title: 'ÊóÖË°åËßÑÂàí', snippet: 'Êé®ËçêÊôØÁÇπ', time: '3Â§©Ââç' },
  { id: 'c6', title: 'ÂÅ•Ë∫´ÊåáÂØº', snippet: 'ËøêÂä®Âª∫ËÆÆ', time: '1Âë®Ââç' },
  { id: 'c7', title: 'ÁæéÈ£üÊé®Ëçê', snippet: '‰ªäÂ§©ÂêÉ‰ªÄ‰πà', time: '1Âë®Ââç' },
  { id: 'c8', title: 'ÊäÄÊúØËÆ®ËÆ∫', snippet: 'React vs Vue', time: '2Âë®Ââç' },
  { id: 'c9', title: 'ËØª‰π¶Á¨îËÆ∞', snippet: 'Â•Ω‰π¶ÂàÜ‰∫´', time: '2Âë®Ââç' },
  { id: 'c10', title: 'Â∑•‰ΩúÊïàÁéá', snippet: 'Êó∂Èó¥ÁÆ°ÁêÜ', time: '1‰∏™ÊúàÂâç' }
]

const demoRoles = [
  { id: 'r1', name: 'ÈªòËÆ§Âä©Êâã', description: 'ÈÄöÁî®AIÂä©Êâã', avatar: 'ü§ñ' },
  { id: 'r2', name: 'ÁºñÁ®ã‰∏ìÂÆ∂', description: '‰ª£Á†ÅÁºñÂÜô‰∏éË∞ÉËØï', avatar: 'üíª' },
  { id: 'r3', name: 'ÂÜô‰ΩúÂä©Êâã', description: 'ÊñáÊ°àÂàõ‰Ωú‰∏éÊ∂¶Ëâ≤', avatar: '‚úçÔ∏è' },
  { id: 'r4', name: 'Â≠¶‰π†ÂØºÂ∏à', description: 'Áü•ËØÜÁ≠îÁñë‰∏éÊåáÂØº', avatar: 'üìö' },
  { id: 'r5', name: 'ÂàõÊÑè‰ºô‰º¥', description: 'Â§¥ËÑëÈ£éÊö¥‰∏éÂàõÊÑè', avatar: 'üí°' },
  { id: 'r6', name: 'ÁîüÊ¥ªÈ°æÈóÆ', description: 'Êó•Â∏∏ÁîüÊ¥ªÂª∫ËÆÆ', avatar: 'üè†' },
  { id: 'r7', name: 'ÂÅ•Â∫∑‰∏ìÂÆ∂', description: 'ÂÅ•Â∫∑‰∏éÂÖªÁîü', avatar: 'üè•' },
  { id: 'r8', name: 'ÊóÖË°åÂêëÂØº', description: 'ÊóÖÊ∏∏ËßÑÂàíÂª∫ËÆÆ', avatar: 'üó∫Ô∏è' },
  { id: 'r9', name: 'ÁæéÈ£üÂÆ∂', description: 'ÁÉπÈ•™‰∏éÁæéÈ£ü', avatar: 'üë®‚Äçüç≥' },
  { id: 'r10', name: 'ÂøÉÁêÜÂí®ËØ¢Â∏à', description: 'ÊÉÖÊÑüÊîØÊåÅ‰∏éÂª∫ËÆÆ', avatar: 'üí≠' }
]

export default function Sidebar() {
  const [searchTerm, setSearchTerm] = useState('')
  const [activeTab, setActiveTab] = useState('conversations')
  const [settingsOpen, setSettingsOpen] = useState(false)

  const filteredConversations = demoConversations.filter(conv =>
    conv.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    conv.snippet.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const filteredRoles = demoRoles.filter(role =>
    role.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    role.description.toLowerCase().includes(searchTerm.toLowerCase())
  )

  return (
    <div className="w-72 h-full bg-background border-r border-border/50 flex flex-col">
      {/* ÊêúÁ¥¢Âå∫Âüü */}
      <div className="p-4 border-b border-border/50">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="ÊêúÁ¥¢‰ºöËØùÊàñËßíËâ≤..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10 rounded-xl"
          />
        </div>
      </div>

      {/* Tabs Âå∫Âüü */}
      <div className="px-4 pt-2">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-2 rounded-xl">
            <TabsTrigger value="conversations" className="rounded-lg">‰ºöËØù</TabsTrigger>
            <TabsTrigger value="roles" className="rounded-lg">ËßíËâ≤</TabsTrigger>
          </TabsList>
          
          <TabsContent value="conversations" className="mt-4">
            <ScrollArea className="h-[calc(100vh-280px)]">
              <div className="space-y-2">
                {filteredConversations.map((conv) => (
                  <div
                    key={conv.id}
                    className="flex items-center gap-3 px-3 py-2 rounded-xl hover:bg-muted/60 cursor-pointer transition-colors"
                  >
                    <AvatarMono name={conv.title} size="sm" />
                    <div className="flex-1 min-w-0">
                      <div className="font-medium text-sm truncate">{conv.title}</div>
                      <div className="text-xs text-muted-foreground truncate">{conv.snippet}</div>
                    </div>
                    <div className="text-xs text-muted-foreground">{conv.time}</div>
                  </div>
                ))}
              </div>
            </ScrollArea>
          </TabsContent>
          
          <TabsContent value="roles" className="mt-4">
            <ScrollArea className="h-[calc(100vh-280px)]">
              <div className="space-y-2">
                {filteredRoles.map((role) => (
                  <div
                    key={role.id}
                    className="flex items-center gap-3 px-3 py-2 rounded-xl hover:bg-muted/60 cursor-pointer transition-colors"
                  >
                    <AvatarMono emoji={role.avatar} size="sm" />
                    <div className="flex-1 min-w-0">
                      <div className="font-medium text-sm truncate">{role.name}</div>
                      <div className="text-xs text-muted-foreground truncate">{role.description}</div>
                    </div>
                  </div>
                ))}
              </div>
            </ScrollArea>
          </TabsContent>
        </Tabs>
      </div>

      {/* Â∫ïÈÉ®ÊåâÈíÆÂå∫Âüü */}
      <div className="mt-auto p-4 border-t border-border/50">
        <div className="space-y-2">
          <Button 
            variant="outline" 
            className="w-full justify-start gap-2 rounded-xl"
            onClick={() => console.log('Êñ∞Âª∫‰ºöËØù')}
          >
            <Plus className="h-4 w-4" />
            Êñ∞Âª∫‰ºöËØù
          </Button>
          
          <Button 
            variant="outline" 
            className="w-full justify-start gap-2 rounded-xl"
            onClick={() => console.log('ÂØºÂÖ•ËßíËâ≤')}
          >
            <Upload className="h-4 w-4" />
            ÂØºÂÖ•ËßíËâ≤
          </Button>
          
          <Dialog open={settingsOpen} onOpenChange={setSettingsOpen}>
            <DialogTrigger asChild>
              <Button 
                variant="outline" 
                className="w-full justify-start gap-2 rounded-xl"
              >
                <Settings className="h-4 w-4" />
                ËÆæÁΩÆ
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>ËÆæÁΩÆ</DialogTitle>
              </DialogHeader>
              <div className="space-y-4 py-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">API Endpoint</label>
                  <Input placeholder="https://api.openai.com/v1" />
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium">API Key</label>
                  <Input type="password" placeholder="sk-..." />
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium">Ê®°ÂûãÂàóË°®</label>
                  <Input placeholder="gpt-4,gpt-3.5-turbo" />
                </div>
                <Separator />
                <div className="flex justify-end gap-2">
                  <Button variant="outline" onClick={() => setSettingsOpen(false)}>
                    ÂèñÊ∂à
                  </Button>
                  <Button onClick={() => {
                    console.log('‰øùÂ≠òËÆæÁΩÆÔºàÂç†‰ΩçÔºâ')
                    setSettingsOpen(false)
                  }}>
                    ‰øùÂ≠ò
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>
    </div>
  )
}